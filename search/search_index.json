{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CRUD FASTAPI POSTGRES STREAMLIT","text":""},{"location":"#instalacao-via-docker","title":"Instala\u00e7\u00e3o via Docker","text":"<p>Para iniciar o projeto, voc\u00ea pode usar Docker. Execute o seguinte comando para construir e iniciar os containers:</p> <pre><code>docker-compose up -d --build\n</code></pre>"},{"location":"#uso","title":"Uso","text":"<ul> <li>Frontend: Acesse a aplica\u00e7\u00e3o Streamlit no endere\u00e7o http://localhost:8501.</li> <li>Backend: Acesse a documenta\u00e7\u00e3o da API FastAPI em http://localhost:8000/docs.</li> <li>Documenta\u00e7\u00e3o: Acesse a documenta\u00e7\u00e3o do projeto em [http://localhost:8081]</li> </ul>"},{"location":"#estrutura-de-pastas-e-arquivos","title":"Estrutura de Pastas e Arquivos","text":"<pre><code>.\n\u251c\u2500\u2500 backend\n\u2502   \u251c\u2500\u2500 crud.py\n\u2502   \u251c\u2500\u2500 database.py\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 requirements.txt\n\u2502   \u251c\u2500\u2500 router.py\n\u2502   \u2514\u2500\u2500 schemas.py\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 backend\n\u2502   \u2502   \u251c\u2500\u2500 crud.md\n\u2502   \u2502   \u251c\u2500\u2500 database.md\n\u2502   \u2502   \u251c\u2500\u2500 models.md\n\u2502   \u2502   \u251c\u2500\u2500 router.md\n\u2502   \u2502   \u2514\u2500\u2500 schemas.md\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 frontend\n\u2502   \u2502   \u251c\u2500\u2500 app.md\n\u2502   \u2502   \u2514\u2500\u2500 produto.md\n\u2502   \u251c\u2500\u2500 gen_home_page.py\n\u2502   \u2514\u2500\u2500 uso.md\n\u251c\u2500\u2500 frontend\n\u2502   \u251c\u2500\u2500 app.py\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 logo.png\n\u2502   \u251c\u2500\u2500 produto.py\n\u2502   \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 overrides\n\u2502   \u2514\u2500\u2500 extra.css\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"#backend","title":"<code>backend/</code>","text":"<p>Esta pasta cont\u00e9m todos os arquivos relacionados ao backend da aplica\u00e7\u00e3o, constru\u00eddo com FastAPI e SQLAlchemy.</p> <ul> <li><code>crud.py</code>: Define as fun\u00e7\u00f5es de CRUD (Criar, Ler, Atualizar, Deletar) para interagir com o banco de dados usando SQLAlchemy.</li> <li><code>database.py</code>: Configura a conex\u00e3o e a sess\u00e3o do banco de dados, usando SQLAlchemy. Inclui a defini\u00e7\u00e3o da URL de conex\u00e3o e a cria\u00e7\u00e3o de sess\u00f5es.</li> <li><code>Dockerfile</code>: Define a configura\u00e7\u00e3o do Docker para o backend, incluindo a instala\u00e7\u00e3o de depend\u00eancias e a configura\u00e7\u00e3o do ambiente.</li> <li><code>main.py</code>: Inicializa a aplica\u00e7\u00e3o FastAPI e configura o servidor Uvicorn. Define o ponto de entrada para o backend.</li> <li><code>models.py</code>: Cont\u00e9m a defini\u00e7\u00e3o dos modelos do SQLAlchemy, que representam as tabelas do banco de dados.</li> <li><code>requirements.txt</code>: Lista as depend\u00eancias Python necess\u00e1rias para o backend, que ser\u00e3o instaladas durante a constru\u00e7\u00e3o do Docker.</li> <li><code>router.py</code>: Define as rotas da API usando FastAPI. Mapeia as URLs para fun\u00e7\u00f5es que manipulam as requisi\u00e7\u00f5es.</li> <li><code>schemas.py</code>: Define os schemas Pydantic usados para valida\u00e7\u00e3o e serializa\u00e7\u00e3o dos dados da API.</li> </ul>"},{"location":"#docker-composeyml","title":"<code>docker-compose.yml</code>","text":"<p>Arquivo de configura\u00e7\u00e3o para Docker Compose, que define os servi\u00e7os necess\u00e1rios para a aplica\u00e7\u00e3o, incluindo o backend, frontend e o banco de dados PostgreSQL.</p>"},{"location":"#docs","title":"<code>docs/</code>","text":"<p>Esta pasta cont\u00e9m documenta\u00e7\u00e3o e scripts relacionados ao projeto.</p> <ul> <li><code>backend/crud.md</code>: Documenta\u00e7\u00e3o espec\u00edfica sobre as opera\u00e7\u00f5es CRUD implementadas no backend.</li> <li><code>backend/databese.md</code>: Documenta\u00e7\u00e3o espec\u00edfica sobre do Banco de Dados.</li> <li><code>backend/models.md</code>: Documenta\u00e7\u00e3o espec\u00edfica sobre SQLAlchemy para a entidade de produtos.</li> <li><code>backend/router.md</code>: Documenta\u00e7\u00e3o espec\u00edfica sobre as rotas FastAPI para opera\u00e7\u00f5es CRUD de produtos.</li> <li><code>backend/schemas.md</code>: Documenta\u00e7\u00e3o espec\u00edfica sobre modelos Pydantic para produtos com categorias e informa\u00e7\u00f5es b\u00e1sicas.</li> <li><code>frontend/app.md</code>: Documenta\u00e7\u00e3o espec\u00edfica sobre aplica\u00e7\u00e3o Streamlit</li> <li><code>frontend/produto.md</code>:Documenta\u00e7\u00e3o espec\u00edfica sobre o backend do produto</li> <li><code>gen_home_page.py</code>: Script para gerar uma p\u00e1gina inicial para a documenta\u00e7\u00e3o.</li> <li><code>uso.md</code>: Documenta\u00e7\u00e3o espec\u00edfica para o uso do projeto.</li> </ul>"},{"location":"#frontend","title":"<code>frontend/</code>","text":"<p>Cont\u00e9m arquivos relacionados ao frontend da aplica\u00e7\u00e3o, desenvolvido com Streamlit.</p> <ul> <li><code>app.py</code>: O ponto de entrada da aplica\u00e7\u00e3o Streamlit, que define a interface do usu\u00e1rio.</li> <li><code>produto.py</code>: M\u00f3dulo que interage com o backend do produto.</li> <li><code>Dockerfile</code>: Define a configura\u00e7\u00e3o do Docker para o frontend, incluindo a instala\u00e7\u00e3o de depend\u00eancias e configura\u00e7\u00e3o do ambiente.</li> <li><code>logo.png</code>: Imagem do logotipo usada na interface do usu\u00e1rio.</li> <li><code>requirements.txt</code>: Lista as depend\u00eancias Python necess\u00e1rias para o frontend, que ser\u00e3o instaladas durante a constru\u00e7\u00e3o do Docker.</li> </ul>"},{"location":"#mkdocsyml","title":"<code>mkdocs.yml</code>","text":"<p>Arquivo de configura\u00e7\u00e3o para MkDocs, uma ferramenta para criar documenta\u00e7\u00e3o est\u00e1tica de sites. Define a estrutura e o conte\u00fado da documenta\u00e7\u00e3o gerada.</p>"},{"location":"#overrides","title":"<code>overrides/</code>","text":"<p>Cont\u00e9m arquivos de personaliza\u00e7\u00e3o para a documenta\u00e7\u00e3o.</p> <ul> <li><code>extra.css</code>: Arquivo CSS adicional para estilizar a documenta\u00e7\u00e3o gerada pelo MkDocs.</li> </ul>"},{"location":"#poetrylock","title":"<code>poetry.lock</code>","text":"<p>Arquivo gerado pelo Poetry que bloqueia as vers\u00f5es exatas das depend\u00eancias do projeto, garantindo a consist\u00eancia do ambiente.</p>"},{"location":"#pyprojecttoml","title":"<code>pyproject.toml</code>","text":"<p>Arquivo de configura\u00e7\u00e3o do Poetry que define as depend\u00eancias do projeto, configura\u00e7\u00f5es e informa\u00e7\u00f5es sobre o projeto.</p>"},{"location":"#readmemd","title":"<code>README.md</code>","text":"<p>Documento principal do projeto que fornece uma vis\u00e3o geral do projeto, instru\u00e7\u00f5es de instala\u00e7\u00e3o, uso e informa\u00e7\u00f5es adicionais.</p>"},{"location":"uso/","title":"Mode de Uso da Aplica\u00e7\u00e3o","text":""},{"location":"uso/#gerenciamento-de-produtos","title":"Gerenciamento de Produtos","text":"<p>A tela da aplica\u00e7\u00e3o fornece uma interface para realizar opera\u00e7\u00f5es relacionadas \u00e0 gest\u00e3o de produtos no sistema. Aqui, voc\u00ea pode adicionar, visualizar, obter detalhes, deletar e atualizar produtos de maneira simples e eficiente. A interface \u00e9 organizada em um formato se\u00e7\u00e3o podendo ser expandida ou recolhida clicando no t\u00edtulo correspondente.A seguir, est\u00e3o as funcionalidades dispon\u00edveis na tela:</p>"},{"location":"uso/#funcionalidades","title":"Funcionalidades:","text":""},{"location":"uso/#adicionar-um-novo-produto","title":"Adicionar um Novo Produto:","text":"<p>Permite a adi\u00e7\u00e3o de novos produtos ao sistema. Ao expandir esta op\u00e7\u00e3o, um formul\u00e1rio ser\u00e1 exibido para inser\u00e7\u00e3o de detalhes como nome, descri\u00e7\u00e3o, pre\u00e7o e quantidade do produto.</p>"},{"location":"uso/#visualizar-produtos","title":"Visualizar Produtos:","text":"<p>Exibe uma lista de todos os produtos atualmente registrados no sistema. Os usu\u00e1rios podem navegar por esta lista para revisar os produtos dispon\u00edveis.</p>"},{"location":"uso/#obter-detalhes-de-um-produto","title":"Obter Detalhes de um Produto:","text":"<p>Oferece a possibilidade de visualizar informa\u00e7\u00f5es detalhadas de um produto espec\u00edfico. Ap\u00f3s selecionar um produto, detalhes adicionais como especifica\u00e7\u00f5es t\u00e9cnicas e hist\u00f3rico de vendas podem ser consultados.</p>"},{"location":"uso/#deletar-produto","title":"Deletar Produto:","text":"<p>Esta funcionalidade permite remover um produto do sistema. Ao expandir esta op\u00e7\u00e3o, voc\u00ea poder\u00e1 selecionar o produto a ser deletado.</p>"},{"location":"uso/#atualizar-produto","title":"Atualizar Produto:","text":"<p>Oferece uma interface para atualizar informa\u00e7\u00f5es de produtos existentes. Isso inclui modificar dados como nome, descri\u00e7\u00e3o, pre\u00e7o e quantidade dispon\u00edvel no estoque.</p>"},{"location":"backend/crud/","title":"CRUD","text":""},{"location":"backend/crud/#backend.crud","title":"<code>backend.crud</code>","text":"<p>Este m\u00f3dulo fornece opera\u00e7\u00f5es CRUD (Create, Read, Update, Delete) para a entidade de produto.</p> <p>Utiliza SQLAlchemy para interagir com o banco de dados e manipular objetos <code>ProductModel</code>.</p> <p>Functions:</p> Name Description <code>get_product</code> <p>Retorna um produto espec\u00edfico com base no ID fornecido.</p> <code>get_products</code> <p>Retorna todos os produtos presentes no banco de dados.</p> <code>create_product</code> <p>Cria um novo produto e o adiciona ao banco de dados.</p> <code>delete_product</code> <p>Deleta um produto do banco de dados com base no ID fornecido.</p> <code>update_product</code> <p>Atualiza um produto existente com base no ID fornecido.</p>"},{"location":"backend/crud/#backend.crud.create_product","title":"<code>create_product(db, product)</code>","text":"<p>Cria um novo produto e o adiciona ao banco de dados.</p> <p>Esta fun\u00e7\u00e3o cria uma inst\u00e2ncia de <code>ProductModel</code> com os dados fornecidos no objeto <code>ProductCreate</code>, adiciona essa inst\u00e2ncia \u00e0 sess\u00e3o do banco de dados, realiza o commit para persistir as altera\u00e7\u00f5es e retorna o produto criado.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>A sess\u00e3o do banco de dados SQLAlchemy utilizada para interagir com o banco de dados.</p> required <code>product</code> <code>ProductCreate</code> <p>O objeto contendo os dados do novo produto a ser criado.</p> required <p>Returns:</p> Name Type Description <code>ProductModel</code> <code>ProductModel</code> <p>O objeto <code>ProductModel</code> que representa o produto rec\u00e9m-criado e persistido no banco de dados.</p> Source code in <code>backend/crud.py</code> <pre><code>def create_product(db: Session, product: ProductCreate) -&gt; ProductModel:\n    \"\"\"\n    Cria um novo produto e o adiciona ao banco de dados.\n\n    Esta fun\u00e7\u00e3o cria uma inst\u00e2ncia de `ProductModel` com os dados fornecidos no objeto `ProductCreate`,\n    adiciona essa inst\u00e2ncia \u00e0 sess\u00e3o do banco de dados, realiza o commit para persistir as altera\u00e7\u00f5es e\n    retorna o produto criado.\n\n    Args:\n        db (Session): A sess\u00e3o do banco de dados SQLAlchemy utilizada para interagir com o banco de dados.\n        product (ProductCreate): O objeto contendo os dados do novo produto a ser criado.\n\n    Returns:\n        ProductModel: O objeto `ProductModel` que representa o produto rec\u00e9m-criado e persistido no banco de dados.\n    \"\"\"\n    db_product = ProductModel(**product.model_dump())\n    db.add(db_product)\n    db.commit()\n    db.refresh(db_product)\n    return db_product\n</code></pre>"},{"location":"backend/crud/#backend.crud.delete_product","title":"<code>delete_product(db, product_id)</code>","text":"<p>Deleta um produto do banco de dados com base no ID fornecido.</p> <p>Esta fun\u00e7\u00e3o localiza e deleta um produto espec\u00edfico com o ID correspondente no banco de dados.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>A sess\u00e3o do banco de dados SQLAlchemy utilizada para interagir com o banco de dados.</p> required <code>product_id</code> <code>int</code> <p>O ID do produto a ser deletado.</p> required <p>Returns:</p> Name Type Description <code>ProductModel</code> <code>ProductModel</code> <p>O objeto <code>ProductModel</code> que foi deletado, ou None se o produto n\u00e3o foi encontrado.</p> Source code in <code>backend/crud.py</code> <pre><code>def delete_product(db: Session, product_id: int) -&gt; ProductModel:\n    \"\"\"\n    Deleta um produto do banco de dados com base no ID fornecido.\n\n    Esta fun\u00e7\u00e3o localiza e deleta um produto espec\u00edfico com o ID correspondente no banco de dados.\n\n    Args:\n        db (Session): A sess\u00e3o do banco de dados SQLAlchemy utilizada para interagir com o banco de dados.\n        product_id (int): O ID do produto a ser deletado.\n\n    Returns:\n        ProductModel: O objeto `ProductModel` que foi deletado, ou None se o produto n\u00e3o foi encontrado.\n    \"\"\"\n    db_product = db.query(ProductModel).filter(ProductModel.id == product_id).first()\n    db.delete(db_product)\n    db.commit()\n    return db_product\n</code></pre>"},{"location":"backend/crud/#backend.crud.get_product","title":"<code>get_product(db, product_id)</code>","text":"<p>Retorna um produto espec\u00edfico com base no ID fornecido.</p> <p>Esta fun\u00e7\u00e3o consulta o banco de dados para recuperar um \u00fanico produto com o ID correspondente.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>A sess\u00e3o do banco de dados SQLAlchemy utilizada para interagir com o banco de dados.</p> required <code>product_id</code> <code>int</code> <p>O ID do produto a ser recuperado.</p> required <p>Returns:</p> Name Type Description <code>ProductModel</code> <code>ProductModel</code> <p>O objeto <code>ProductModel</code> que corresponde ao ID fornecido, ou None se n\u00e3o encontrado.</p> Source code in <code>backend/crud.py</code> <pre><code>def get_product(db: Session, product_id: int) -&gt; ProductModel:\n    \"\"\"\n    Retorna um produto espec\u00edfico com base no ID fornecido.\n\n    Esta fun\u00e7\u00e3o consulta o banco de dados para recuperar um \u00fanico produto com o ID correspondente.\n\n    Args:\n        db (Session): A sess\u00e3o do banco de dados SQLAlchemy utilizada para interagir com o banco de dados.\n        product_id (int): O ID do produto a ser recuperado.\n\n    Returns:\n        ProductModel: O objeto `ProductModel` que corresponde ao ID fornecido, ou None se n\u00e3o encontrado.\n    \"\"\"\n    return db.query(ProductModel).filter(ProductModel.id == product_id).first()\n</code></pre>"},{"location":"backend/crud/#backend.crud.get_products","title":"<code>get_products(db)</code>","text":"<p>Retorna todos os produtos presentes no banco de dados.</p> <p>Esta fun\u00e7\u00e3o consulta o banco de dados para recuperar todos os produtos armazenados.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>A sess\u00e3o do banco de dados SQLAlchemy utilizada para interagir com o banco de dados.</p> required <p>Returns:</p> Type Description <code>ProductModel</code> <p>List[ProductModel]: Uma lista de objetos <code>ProductModel</code> representando todos os produtos no banco de dados.</p> Source code in <code>backend/crud.py</code> <pre><code>def get_products(db: Session) -&gt; ProductModel:\n    \"\"\"\n    Retorna todos os produtos presentes no banco de dados.\n\n    Esta fun\u00e7\u00e3o consulta o banco de dados para recuperar todos os produtos armazenados.\n\n    Args:\n        db (Session): A sess\u00e3o do banco de dados SQLAlchemy utilizada para interagir com o banco de dados.\n\n    Returns:\n        List[ProductModel]: Uma lista de objetos `ProductModel` representando todos os produtos no banco de dados.\n    \"\"\"\n    return db.query(ProductModel).all()\n</code></pre>"},{"location":"backend/crud/#backend.crud.update_product","title":"<code>update_product(db, product_id, product)</code>","text":"<p>Atualiza um produto existente com base no ID fornecido.</p> <p>Esta fun\u00e7\u00e3o consulta o banco de dados para encontrar o produto com o ID correspondente e atualiza seus campos conforme especificado no objeto <code>ProductUpdate</code>. Ap\u00f3s a atualiza\u00e7\u00e3o, o produto modificado \u00e9 commitado no banco de dados.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>A sess\u00e3o do banco de dados SQLAlchemy utilizada para interagir com o banco de dados.</p> required <code>product_id</code> <code>int</code> <p>O ID do produto a ser atualizado.</p> required <code>product</code> <code>ProductUpdate</code> <p>O objeto contendo os campos a serem atualizados no produto.</p> required <p>Returns:</p> Name Type Description <code>ProductModel</code> <code>ProductUpdate</code> <p>O objeto <code>ProductModel</code> que foi atualizado, ou None se o produto n\u00e3o foi encontrado.</p> Source code in <code>backend/crud.py</code> <pre><code>def update_product(\n    db: Session, product_id: int, product: ProductUpdate\n) -&gt; ProductUpdate:\n    \"\"\"\n    Atualiza um produto existente com base no ID fornecido.\n\n    Esta fun\u00e7\u00e3o consulta o banco de dados para encontrar o produto com o ID correspondente e atualiza\n    seus campos conforme especificado no objeto `ProductUpdate`. Ap\u00f3s a atualiza\u00e7\u00e3o, o produto modificado\n    \u00e9 commitado no banco de dados.\n\n    Args:\n        db (Session): A sess\u00e3o do banco de dados SQLAlchemy utilizada para interagir com o banco de dados.\n        product_id (int): O ID do produto a ser atualizado.\n        product (ProductUpdate): O objeto contendo os campos a serem atualizados no produto.\n\n    Returns:\n        ProductModel: O objeto `ProductModel` que foi atualizado, ou None se o produto n\u00e3o foi encontrado.\n    \"\"\"\n    db_product = db.query(ProductModel).filter(ProductModel.id == product_id).first()\n\n    if db_product is None:\n        return None\n\n    if product.name is not None:\n        db_product.name = product.name\n    if product.description is not None:\n        db_product.description = product.description\n    if product.price is not None:\n        db_product.price = product.price\n    if product.categoria is not None:\n        db_product.categoria = product.categoria\n    if product.email_fornecedor is not None:\n        db_product.email_fornecedor = product.email_fornecedor\n\n    db.commit()\n    return db_product\n</code></pre>"},{"location":"backend/database/","title":"Database","text":""},{"location":"backend/database/#backend.database","title":"<code>backend.database</code>","text":"<p>M\u00f3dulo de Configura\u00e7\u00e3o do Banco de Dados</p> <p>Este m\u00f3dulo configura a conex\u00e3o com o banco de dados e fornece uma fun\u00e7\u00e3o para obter uma sess\u00e3o de banco de dados.</p> <p>Functions:</p> Name Description <code>get_db</code> <p>Fun\u00e7\u00e3o para fornecer uma sess\u00e3o de banco de dados para ser utilizada dentro de um contexto.     Garante o gerenciamento adequado da sess\u00e3o fechando-a ap\u00f3s o uso.</p>"},{"location":"backend/database/#backend.database.get_db","title":"<code>get_db()</code>","text":"<p>Fun\u00e7\u00e3o para fornecer uma sess\u00e3o de banco de dados para ser utilizada dentro de um contexto.         Garante o gerenciamento adequado da sess\u00e3o fechando-a ap\u00f3s o uso.</p> <p>Yields:</p> Name Type Description <code>db</code> <code>sessionmaker</code> <p>Uma sessionmaker do SQLAlchemy</p> Source code in <code>backend/database.py</code> <pre><code>def get_db() -&gt; sessionmaker:\n    \"\"\"\n    Fun\u00e7\u00e3o para fornecer uma sess\u00e3o de banco de dados para ser utilizada dentro de um contexto.\n            Garante o gerenciamento adequado da sess\u00e3o fechando-a ap\u00f3s o uso.\n\n    Yields:\n        db: Uma sessionmaker do SQLAlchemy\n    \"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n</code></pre>"},{"location":"backend/models/","title":"Models","text":""},{"location":"backend/models/#backend.models","title":"<code>backend.models</code>","text":""},{"location":"backend/models/#backend.models.ProductModel","title":"<code>ProductModel</code>","text":"<p>               Bases: <code>Base</code></p> <p>Modelo SQLAlchemy para a entidade de produtos.</p> <p>Esta classe representa um produto armazenado no banco de dados.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Identificador \u00fanico do produto.</p> required <code>name</code> <code>str</code> <p>Nome do produto.</p> required <code>description</code> <code>str</code> <p>Descri\u00e7\u00e3o do produto.</p> required <code>price</code> <code>float</code> <p>Pre\u00e7o do produto.</p> required <code>categoria</code> <code>str</code> <p>Categoria do produto, escolhida a partir de <code>CategoriaBase</code>.</p> required <code>email_fornecedor</code> <code>str</code> <p>E-mail do fornecedor do produto.</p> required <code>created_at</code> <code>DateTime</code> <p>Data e hora de cria\u00e7\u00e3o do registro, definido automaticamente.</p> required <p>Methods:</p> Name Description <code>__repr__</code> <p>Retorna uma representa\u00e7\u00e3o de string do objeto <code>ProductModel</code>.</p> Source code in <code>backend/models.py</code> <pre><code>class ProductModel(Base):\n    \"\"\"\n    Modelo SQLAlchemy para a entidade de produtos.\n\n    Esta classe representa um produto armazenado no banco de dados.\n\n    Parameters:\n        id (int): Identificador \u00fanico do produto.\n        name (str): Nome do produto.\n        description (str): Descri\u00e7\u00e3o do produto.\n        price (float): Pre\u00e7o do produto.\n        categoria (str): Categoria do produto, escolhida a partir de `CategoriaBase`.\n        email_fornecedor (str): E-mail do fornecedor do produto.\n        created_at (DateTime): Data e hora de cria\u00e7\u00e3o do registro, definido automaticamente.\n\n    Methods:\n        __repr__():\n            Retorna uma representa\u00e7\u00e3o de string do objeto `ProductModel`.\n    \"\"\"\n\n    __tablename__ = \"products\"  # esse ser\u00e1 o nome da tabela\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    description = Column(String)\n    price = Column(Float)\n    categoria = Column(String)\n    email_fornecedor = Column(String)\n    created_at = Column(DateTime(timezone=True), default=func.now())\n\n    def __repr__(self):\n        return f\"&lt;Product(categoria={self.categoria})&gt;\"\n</code></pre>"},{"location":"backend/router/","title":"Router","text":""},{"location":"backend/router/#backend.router","title":"<code>backend.router</code>","text":"<p>M\u00f3dulo de rotas FastAPI para opera\u00e7\u00f5es CRUD de produtos.</p> <p>Este m\u00f3dulo define rotas HTTP para criar, ler, atualizar e deletar produtos no banco de dados utilizando o framework FastAPI e SQLAlchemy.</p> <p>Functions:</p> Name Description <code>create_product_route</code> <p>Cria um novo produto no banco de dados.</p> <code>detele_product</code> <p>Deleta um produto do banco de dados com base no ID fornecido.</p> <code>read_all_products</code> <p>Retorna todos os produtos presentes no banco de dados.</p> <code>read_one_product</code> <p>Retorna um produto espec\u00edfico com base no ID fornecido.</p> <code>update_product_route</code> <p>Atualiza um produto existente com base no ID fornecido.</p>"},{"location":"backend/router/#backend.router.create_product_route","title":"<code>create_product_route(product, db=Depends(get_db))</code>","text":"<p>Cria um novo produto no banco de dados.</p> <p>Parameters:</p> Name Type Description Default <code>product</code> <code>ProductCreate</code> <p>Dados do produto a ser criado.</p> required <code>db</code> <code>Session</code> <p>Sess\u00e3o do banco de dados SQLAlchemy. Defaults to Depends(get_db).</p> <code>Depends(get_db)</code> <p>Returns:</p> Name Type Description <code>ProductResponse</code> <code>ProductResponse</code> <p>Objeto representando o produto criado.</p> Source code in <code>backend/router.py</code> <pre><code>@router.post(\"/products/\", response_model=ProductResponse)\ndef create_product_route(\n    product: ProductCreate, db: Session = Depends(get_db)\n) -&gt; ProductResponse:\n    \"\"\"\n    Cria um novo produto no banco de dados.\n\n    Args:\n        product (ProductCreate): Dados do produto a ser criado.\n        db (Session, optional): Sess\u00e3o do banco de dados SQLAlchemy. Defaults to Depends(get_db).\n\n    Returns:\n        ProductResponse: Objeto representando o produto criado.\n    \"\"\"\n    return create_product(db=db, product=product)\n</code></pre>"},{"location":"backend/router/#backend.router.detele_product","title":"<code>detele_product(product_id, db=Depends(get_db))</code>","text":"<p>Deleta um produto do banco de dados com base no ID fornecido.</p> <p>Parameters:</p> Name Type Description Default <code>product_id</code> <code>int</code> <p>ID do produto a ser deletado.</p> required <code>db</code> <code>Session</code> <p>Sess\u00e3o do banco de dados SQLAlchemy. Defaults to Depends(get_db).</p> <code>Depends(get_db)</code> <p>Returns:</p> Name Type Description <code>ProductResponse</code> <code>ProductResponse</code> <p>Objeto representando o produto deletado.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Se o produto com o ID especificado n\u00e3o for encontrado.</p> Source code in <code>backend/router.py</code> <pre><code>@router.delete(\"/products/{product_id}\", response_model=ProductResponse)\ndef detele_product(product_id: int, db: Session = Depends(get_db)) -&gt; ProductResponse:\n    \"\"\"\n    Deleta um produto do banco de dados com base no ID fornecido.\n\n    Args:\n        product_id (int): ID do produto a ser deletado.\n        db (Session, optional): Sess\u00e3o do banco de dados SQLAlchemy. Defaults to Depends(get_db).\n\n    Returns:\n        ProductResponse: Objeto representando o produto deletado.\n\n    Raises:\n        HTTPException: Se o produto com o ID especificado n\u00e3o for encontrado.\n    \"\"\"\n    db_product = delete_product(db, product_id=product_id)\n    if db_product is None:\n        raise HTTPException(status_code=404, detail=\"Product not found\")\n    return db_product\n</code></pre>"},{"location":"backend/router/#backend.router.read_all_products","title":"<code>read_all_products(db=Depends(get_db))</code>","text":"<p>Retorna todos os produtos presentes no banco de dados.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Session</code> <p>Sess\u00e3o do banco de dados SQLAlchemy. Defaults to Depends(get_db).</p> <code>Depends(get_db)</code> <p>Returns:</p> Type Description <code>ProductResponse</code> <p>List[ProductResponse]: Lista de objetos representando todos os produtos no banco de dados.</p> Source code in <code>backend/router.py</code> <pre><code>@router.get(\"/products/\", response_model=List[ProductResponse])\ndef read_all_products(db: Session = Depends(get_db)) -&gt; ProductResponse:\n    \"\"\"\n    Retorna todos os produtos presentes no banco de dados.\n\n    Args:\n        db (Session, optional): Sess\u00e3o do banco de dados SQLAlchemy. Defaults to Depends(get_db).\n\n    Returns:\n        List[ProductResponse]: Lista de objetos representando todos os produtos no banco de dados.\n    \"\"\"\n    products = get_products(db)\n    return products\n</code></pre>"},{"location":"backend/router/#backend.router.read_one_product","title":"<code>read_one_product(product_id, db=Depends(get_db))</code>","text":"<p>Retorna um produto espec\u00edfico com base no ID fornecido.</p> <p>Parameters:</p> Name Type Description Default <code>product_id</code> <code>int</code> <p>ID do produto a ser recuperado.</p> required <code>db</code> <code>Session</code> <p>Sess\u00e3o do banco de dados SQLAlchemy. Defaults to Depends(get_db).</p> <code>Depends(get_db)</code> <p>Returns:</p> Name Type Description <code>ProductResponse</code> <code>ProductResponse</code> <p>Objeto representando o produto recuperado.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Se o produto com o ID especificado n\u00e3o for encontrado.</p> Source code in <code>backend/router.py</code> <pre><code>@router.get(\"/products/{product_id}\", response_model=ProductResponse)\ndef read_one_product(product_id: int, db: Session = Depends(get_db)) -&gt; ProductResponse:\n    \"\"\"\n    Retorna um produto espec\u00edfico com base no ID fornecido.\n\n    Args:\n        product_id (int): ID do produto a ser recuperado.\n        db (Session, optional): Sess\u00e3o do banco de dados SQLAlchemy. Defaults to Depends(get_db).\n\n    Returns:\n        ProductResponse: Objeto representando o produto recuperado.\n\n    Raises:\n        HTTPException: Se o produto com o ID especificado n\u00e3o for encontrado.\n    \"\"\"\n    db_product = get_product(db, product_id=product_id)\n    if db_product is None:\n        raise HTTPException(status_code=404, detail=\"Product not found\")\n    return db_product\n</code></pre>"},{"location":"backend/router/#backend.router.update_product_route","title":"<code>update_product_route(product_id, product, db=Depends(get_db))</code>","text":"<p>Atualiza um produto existente com base no ID fornecido.</p> <p>Parameters:</p> Name Type Description Default <code>product_id</code> <code>int</code> <p>ID do produto a ser atualizado.</p> required <code>product</code> <code>ProductUpdate</code> <p>Dados do produto a serem atualizados.</p> required <code>db</code> <code>Session</code> <p>Sess\u00e3o do banco de dados SQLAlchemy. Defaults to Depends(get_db).</p> <code>Depends(get_db)</code> <p>Returns:</p> Name Type Description <code>ProductResponse</code> <code>ProductResponse</code> <p>Objeto representando o produto atualizado.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>Se o produto com o ID especificado n\u00e3o for encontrado.</p> Source code in <code>backend/router.py</code> <pre><code>@router.put(\"/products/{product_id}\", response_model=ProductResponse)\ndef update_product_route(\n    product_id: int, product: ProductUpdate, db: Session = Depends(get_db)\n) -&gt; ProductResponse:\n    \"\"\"\n    Atualiza um produto existente com base no ID fornecido.\n\n    Args:\n        product_id (int): ID do produto a ser atualizado.\n        product (ProductUpdate): Dados do produto a serem atualizados.\n        db (Session, optional): Sess\u00e3o do banco de dados SQLAlchemy. Defaults to Depends(get_db).\n\n    Returns:\n        ProductResponse: Objeto representando o produto atualizado.\n\n    Raises:\n        HTTPException: Se o produto com o ID especificado n\u00e3o for encontrado.\n    \"\"\"\n    db_product = update_product(db=db, product_id=product_id, product=product)\n    if db_product is None:\n        raise HTTPException(status_code=404, detail=\"Product not found\")\n    return db_product\n</code></pre>"},{"location":"backend/schemas/","title":"Schemas","text":""},{"location":"backend/schemas/#backend.schemas","title":"<code>backend.schemas</code>","text":"<p>Este m\u00f3dulo define modelos Pydantic para produtos com categorias e informa\u00e7\u00f5es b\u00e1sicas.</p>"},{"location":"backend/schemas/#backend.schemas.CategoriaBase","title":"<code>CategoriaBase</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Uma enumera\u00e7\u00e3o que representa categorias dispon\u00edveis para produtos.</p> <p>Valores da Enum:</p> <ul> <li>categoria1: \"Eletr\u00f4nico\".</li> <li>categoria2: \"Eletrodom\u00e9stico\".</li> <li>categoria3: \"M\u00f3veis\".</li> <li>categoria4: \"Roupas\".</li> <li>categoria5: \"Cal\u00e7ados\".</li> </ul> Source code in <code>backend/schemas.py</code> <pre><code>class CategoriaBase(Enum):\n    \"\"\"\n    Uma enumera\u00e7\u00e3o que representa categorias dispon\u00edveis para produtos.\n\n    Valores da Enum:\n\n    - categoria1: \"Eletr\u00f4nico\".\n    - categoria2: \"Eletrodom\u00e9stico\".\n    - categoria3: \"M\u00f3veis\".\n    - categoria4: \"Roupas\".\n    - categoria5: \"Cal\u00e7ados\".\n    \"\"\"\n\n    categoria1 = \"Eletr\u00f4nico\"\n    categoria2 = \"Eletrodom\u00e9stico\"\n    categoria3 = \"M\u00f3veis\"\n    categoria4 = \"Roupas\"\n    categoria5 = \"Cal\u00e7ados\"\n</code></pre>"},{"location":"backend/schemas/#backend.schemas.ProductBase","title":"<code>ProductBase</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Modelo Pydantic base para informa\u00e7\u00f5es de produto.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>O nome do produto.</p> required <code>description</code> <code>Optional[str]</code> <p>Descri\u00e7\u00e3o opcional do produto.</p> required <code>price</code> <code>PositiveFloat</code> <p>O pre\u00e7o do produto.</p> required <code>categoria</code> <code>CategoriaBase</code> <p>A categoria do produto.</p> required <code>email_fornecedor</code> <code>EmailStr</code> <p>Email do fornecedor do produto.</p> required <p>Methods:</p> Name Description <code>check_categoria</code> <p>M\u00e9todo validador que garante que o valor da categoria seja v\u00e1lido.</p> Source code in <code>backend/schemas.py</code> <pre><code>class ProductBase(BaseModel):\n    \"\"\"\n    Modelo Pydantic base para informa\u00e7\u00f5es de produto.\n\n    Parameters:\n        name (str): O nome do produto.\n        description (Optional[str]): Descri\u00e7\u00e3o opcional do produto.\n        price (PositiveFloat): O pre\u00e7o do produto.\n        categoria (CategoriaBase): A categoria do produto.\n        email_fornecedor (EmailStr): Email do fornecedor do produto.\n\n    Methods:\n        check_categoria(cls, v): M\u00e9todo validador que garante que o valor da categoria seja v\u00e1lido.\n    \"\"\"\n\n    name: str\n    description: Optional[str] = None\n    price: PositiveFloat\n    categoria: CategoriaBase\n    email_fornecedor: EmailStr\n\n    @field_validator(\"categoria\")\n    def check_categoria(cls, v):\n        if v in [item.value for item in CategoriaBase]:\n            return v\n        raise ValueError(\"Categoria inv\u00e1lida\")\n\n    class Config:\n        use_enum_values = True\n</code></pre>"},{"location":"backend/schemas/#backend.schemas.ProductCreate","title":"<code>ProductCreate</code>","text":"<p>               Bases: <code>ProductBase</code></p> <p>Modelo Pydantic para cria\u00e7\u00e3o de novos produtos, que herda de ProductBase.</p> Source code in <code>backend/schemas.py</code> <pre><code>class ProductCreate(ProductBase):\n    \"\"\"\n    Modelo Pydantic para cria\u00e7\u00e3o de novos produtos, que herda de ProductBase.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"backend/schemas/#backend.schemas.ProductResponse","title":"<code>ProductResponse</code>","text":"<p>               Bases: <code>ProductBase</code></p> <p>Modelo Pydantic para responder com informa\u00e7\u00f5es de produto.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>O identificador \u00fanico do produto.</p> required <code>created_at</code> <code>datetime</code> <p>Data e hora de cria\u00e7\u00e3o do produto.</p> required Source code in <code>backend/schemas.py</code> <pre><code>class ProductResponse(ProductBase):\n    \"\"\"\n    Modelo Pydantic para responder com informa\u00e7\u00f5es de produto.\n\n    Parameters:\n        id (int): O identificador \u00fanico do produto.\n        created_at (datetime): Data e hora de cria\u00e7\u00e3o do produto.\n    \"\"\"\n\n    id: int\n    created_at: datetime\n\n    class Config:\n        from_attributes = True\n</code></pre>"},{"location":"backend/schemas/#backend.schemas.ProductUpdate","title":"<code>ProductUpdate</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Modelo Pydantic para atualiza\u00e7\u00e3o de informa\u00e7\u00f5es de produtos existentes.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>Optional[str]</code> <p>Nome atualizado do produto.</p> required <code>description</code> <code>Optional[str]</code> <p>Descri\u00e7\u00e3o atualizada do produto.</p> required <code>price</code> <code>Optional[PositiveFloat]</code> <p>Pre\u00e7o atualizado do produto.</p> required <code>categoria</code> <code>Optional[CategoriaBase]</code> <p>Categoria atualizada do produto.</p> required <code>email_fornecedor</code> <code>Optional[EmailStr]</code> <p>Email do fornecedor atualizado do produto.</p> required <p>Methods:</p> Name Description <code>check_categoria</code> <p>M\u00e9todo validador que garante que o valor da categoria seja v\u00e1lido.</p> Source code in <code>backend/schemas.py</code> <pre><code>class ProductUpdate(BaseModel):\n    \"\"\"\n    Modelo Pydantic para atualiza\u00e7\u00e3o de informa\u00e7\u00f5es de produtos existentes.\n\n    Parameters:\n        name (Optional[str]): Nome atualizado do produto.\n        description (Optional[str]): Descri\u00e7\u00e3o atualizada do produto.\n        price (Optional[PositiveFloat]): Pre\u00e7o atualizado do produto.\n        categoria (Optional[CategoriaBase]): Categoria atualizada do produto.\n        email_fornecedor (Optional[EmailStr]): Email do fornecedor atualizado do produto.\n\n    Methods:\n        check_categoria(cls, v): M\u00e9todo validador que garante que o valor da categoria seja v\u00e1lido.\n    \"\"\"\n\n    name: Optional[str] = None\n    description: Optional[str] = None\n    price: Optional[PositiveFloat] = None\n    categoria: Optional[CategoriaBase] = None\n    email_fornecedor: Optional[EmailStr] = None\n\n    @field_validator(\"categoria\")\n    def check_categoria(cls, v):\n        if v is None:\n            return v\n        if v in [item.value for item in CategoriaBase]:\n            return v\n        raise ValueError(\"Categoria inv\u00e1lida\")\n\n    class Config:\n        use_enum_values = True\n</code></pre>"},{"location":"frontend/app/","title":"App","text":""},{"location":"frontend/app/#frontend.app","title":"<code>frontend.app</code>","text":"<p>Aplica\u00e7\u00e3o Streamlit para gerenciamento de produtos. Utiliza o Streamlit para criar uma interface de usu\u00e1rio interativa para adicionar, visualizar, atualizar e deletar produtos em um backend.</p>"},{"location":"frontend/app/#frontend.app.adicionar_novo_produto","title":"<code>adicionar_novo_produto()</code>","text":"<p>Exibe um formul\u00e1rio para adicionar um novo produto. Coleta informa\u00e7\u00f5es do produto, como nome, descri\u00e7\u00e3o, pre\u00e7o, categoria e email do fornecedor. Ao enviar o formul\u00e1rio, chama a fun\u00e7\u00e3o <code>adicionar_produto</code> e exibe uma mensagem de resposta.</p> Source code in <code>frontend/app.py</code> <pre><code>def adicionar_novo_produto():\n    \"\"\"\n    Exibe um formul\u00e1rio para adicionar um novo produto.\n    Coleta informa\u00e7\u00f5es do produto, como nome, descri\u00e7\u00e3o, pre\u00e7o, categoria e email do fornecedor.\n    Ao enviar o formul\u00e1rio, chama a fun\u00e7\u00e3o `adicionar_produto` e exibe uma mensagem de resposta.\n    \"\"\"\n    with st.expander(\"Adicionar um Novo Produto\"):\n        with st.form(\"new_product\"):\n            name = st.text_input(\"Nome do Produto\")\n            description = st.text_area(\"Descri\u00e7\u00e3o do Produto\")\n            price = st.number_input(\"Pre\u00e7o\", min_value=0.01, format=\"%f\")\n            categoria = st.selectbox(\n                \"Categoria\",\n                [\"Eletr\u00f4nico\", \"Eletrodom\u00e9stico\", \"M\u00f3veis\", \"Roupas\", \"Cal\u00e7ados\"],\n            )\n            email_fornecedor = st.text_input(\"Email do Fornecedor\")\n            submit_button = st.form_submit_button(\"Adicionar Produto\")\n\n            if submit_button:\n                response = adicionar_produto(\n                    name, description, price, categoria, email_fornecedor\n                )\n                show_response_message(response)\n</code></pre>"},{"location":"frontend/app/#frontend.app.atualizar_produto_funcao","title":"<code>atualizar_produto_funcao()</code>","text":"<p>Exibe um formul\u00e1rio para atualizar um produto existente. Coleta informa\u00e7\u00f5es do produto, como ID, novo nome, nova descri\u00e7\u00e3o, novo pre\u00e7o, nova categoria e novo email do fornecedor. Ao enviar o formul\u00e1rio, chama a fun\u00e7\u00e3o <code>atualizar_produto</code> com os dados fornecidos e exibe uma mensagem de resposta.</p> Source code in <code>frontend/app.py</code> <pre><code>def atualizar_produto_funcao():\n    \"\"\"\n    Exibe um formul\u00e1rio para atualizar um produto existente.\n    Coleta informa\u00e7\u00f5es do produto, como ID, novo nome, nova descri\u00e7\u00e3o, novo pre\u00e7o, nova categoria e novo email do fornecedor.\n    Ao enviar o formul\u00e1rio, chama a fun\u00e7\u00e3o `atualizar_produto` com os dados fornecidos e exibe uma mensagem de resposta.\n    \"\"\"\n    with st.expander(\"Atualizar Produto\"):\n        with st.form(\"update_product\"):\n            update_id = st.number_input(\"ID do Produto\", min_value=1, format=\"%d\")\n            new_name = st.text_input(\"Novo Nome do Produto\")\n            new_description = st.text_area(\"Nova Descri\u00e7\u00e3o do Produto\")\n            new_price = st.number_input(\n                \"Novo Pre\u00e7o\",\n                min_value=0.01,\n                format=\"%f\",\n            )\n            new_categoria = st.selectbox(\n                \"Nova Categoria\",\n                [\"Eletr\u00f4nico\", \"Eletrodom\u00e9stico\", \"M\u00f3veis\", \"Roupas\", \"Cal\u00e7ados\"],\n            )\n            new_email = st.text_input(\"Novo Email do Fornecedor\")\n\n            update_button = st.form_submit_button(\"Atualizar Produto\")\n\n            if update_button:\n                update_data = {}\n                if new_name:\n                    update_data[\"name\"] = new_name\n                if new_description:\n                    update_data[\"description\"] = new_description\n                if new_price &gt; 0:\n                    update_data[\"price\"] = new_price\n                if new_email:\n                    update_data[\"email_fornecedor\"] = new_email\n                if new_categoria:\n                    update_data[\"categoria\"] = new_categoria\n\n                if update_data:\n                    response = atualizar_produto(update_id, update_data)\n                    show_response_message(response)\n                else:\n                    st.error(\"Nenhuma informa\u00e7\u00e3o fornecida para atualiza\u00e7\u00e3o\")\n</code></pre>"},{"location":"frontend/app/#frontend.app.configurar_pagina","title":"<code>configurar_pagina()</code>","text":"<p>Configura a p\u00e1gina do Streamlit, incluindo o layout e a imagem do cabe\u00e7alho. Define o t\u00edtulo da p\u00e1gina como \"Gerenciamento de Produtos\".</p> Source code in <code>frontend/app.py</code> <pre><code>def configurar_pagina():\n    \"\"\"\n    Configura a p\u00e1gina do Streamlit, incluindo o layout e a imagem do cabe\u00e7alho.\n    Define o t\u00edtulo da p\u00e1gina como \"Gerenciamento de Produtos\".\n    \"\"\"\n    st.set_page_config(layout=\"wide\")\n    st.image(\"logo.png\", width=200)\n    st.title(\"Gerenciamento de Produtos\")\n</code></pre>"},{"location":"frontend/app/#frontend.app.deletar_produto_funcao","title":"<code>deletar_produto_funcao()</code>","text":"<p>Exibe um formul\u00e1rio para deletar um produto baseado no ID fornecido. Coleta o ID do produto do usu\u00e1rio e chama a fun\u00e7\u00e3o <code>deletar_produto</code>. Exibe uma mensagem de resposta ap\u00f3s a tentativa de dele\u00e7\u00e3o.</p> Source code in <code>frontend/app.py</code> <pre><code>def deletar_produto_funcao():\n    \"\"\"\n    Exibe um formul\u00e1rio para deletar um produto baseado no ID fornecido.\n    Coleta o ID do produto do usu\u00e1rio e chama a fun\u00e7\u00e3o `deletar_produto`.\n    Exibe uma mensagem de resposta ap\u00f3s a tentativa de dele\u00e7\u00e3o.\n    \"\"\"\n    with st.expander(\"Deletar Produto\"):\n        delete_id = st.number_input(\n            \"ID do Produto para Deletar\", min_value=1, format=\"%d\"\n        )\n        if st.button(\"Deletar Produto\"):\n            response = deletar_produto(delete_id)\n            show_response_message(response)\n</code></pre>"},{"location":"frontend/app/#frontend.app.main","title":"<code>main()</code>","text":"<p>Fun\u00e7\u00e3o principal que organiza a execu\u00e7\u00e3o das funcionalidades da aplica\u00e7\u00e3o. Configura a p\u00e1gina e chama as fun\u00e7\u00f5es para adicionar, visualizar, obter detalhes, deletar e atualizar produtos.</p> Source code in <code>frontend/app.py</code> <pre><code>def main():\n    \"\"\"\n    Fun\u00e7\u00e3o principal que organiza a execu\u00e7\u00e3o das funcionalidades da aplica\u00e7\u00e3o.\n    Configura a p\u00e1gina e chama as fun\u00e7\u00f5es para adicionar, visualizar, obter detalhes, deletar e atualizar produtos.\n    \"\"\"\n    configurar_pagina()\n    adicionar_novo_produto()\n    visualizar_todos_produtos()\n    obter_detalhes_produto()\n    deletar_produto_funcao()\n    atualizar_produto_funcao()\n</code></pre>"},{"location":"frontend/app/#frontend.app.obter_detalhes_produto","title":"<code>obter_detalhes_produto()</code>","text":"<p>Exibe detalhes de um produto espec\u00edfico baseado no ID fornecido. Coleta o ID do produto do usu\u00e1rio e chama a fun\u00e7\u00e3o <code>obter_detalhes_do_produto</code>. Se a resposta for bem-sucedida, converte a resposta em um DataFrame do Pandas e a exibe.</p> Source code in <code>frontend/app.py</code> <pre><code>def obter_detalhes_produto():\n    \"\"\"\n    Exibe detalhes de um produto espec\u00edfico baseado no ID fornecido.\n    Coleta o ID do produto do usu\u00e1rio e chama a fun\u00e7\u00e3o `obter_detalhes_do_produto`.\n    Se a resposta for bem-sucedida, converte a resposta em um DataFrame do Pandas e a exibe.\n    \"\"\"\n    with st.expander(\"Obter Detalhes de um Produto\"):\n        get_id = st.number_input(\"ID do Produto\", min_value=1, format=\"%d\")\n        if st.button(\"Buscar Produto\"):\n            response = obter_detalhes_do_produto(get_id)\n            if response.status_code == 200:\n                product = response.json()\n                df = pd.DataFrame([product])\n                df = df[\n                    [\n                        \"id\",\n                        \"name\",\n                        \"description\",\n                        \"price\",\n                        \"categoria\",\n                        \"email_fornecedor\",\n                        \"created_at\",\n                    ]\n                ]\n                st.write(df.to_html(index=False), unsafe_allow_html=True)\n            else:\n                show_response_message(response)\n</code></pre>"},{"location":"frontend/app/#frontend.app.visualizar_todos_produtos","title":"<code>visualizar_todos_produtos()</code>","text":"<p>Exibe todos os produtos em um formato tabular. Ao clicar no bot\u00e3o \"Exibir Todos os Produtos\", chama a fun\u00e7\u00e3o <code>visualizar_produtos</code>. Se a resposta for bem-sucedida, converte a resposta em um DataFrame do Pandas e a exibe.</p> Source code in <code>frontend/app.py</code> <pre><code>def visualizar_todos_produtos():\n    \"\"\"\n    Exibe todos os produtos em um formato tabular.\n    Ao clicar no bot\u00e3o \"Exibir Todos os Produtos\", chama a fun\u00e7\u00e3o `visualizar_produtos`.\n    Se a resposta for bem-sucedida, converte a resposta em um DataFrame do Pandas e a exibe.\n    \"\"\"\n    with st.expander(\"Visualizar Produtos\"):\n        if st.button(\"Exibir Todos os Produtos\"):\n            response = visualizar_produtos()\n            if response.status_code == 200:\n                product = response.json()\n                df = pd.DataFrame(product)\n                df = df[\n                    [\n                        \"id\",\n                        \"name\",\n                        \"description\",\n                        \"price\",\n                        \"categoria\",\n                        \"email_fornecedor\",\n                        \"created_at\",\n                    ]\n                ]\n                st.write(df.to_html(index=False), unsafe_allow_html=True)\n            else:\n                show_response_message(response)\n</code></pre>"},{"location":"frontend/produto/","title":"Produto","text":""},{"location":"frontend/produto/#frontend.produto","title":"<code>frontend.produto</code>","text":"<p>Obtem um produto com atributos como nome, descri\u00e7\u00e3o, pre\u00e7o, categoria e email do fornecedor.</p> <p>Functions:</p> Name Description <code>show_response_message</code> <p>Exibe uma mensagem baseada no status da resposta HTTP.                                                 Se o status da resposta for 200, exibe uma mensagem de sucesso.                                                 Caso contr\u00e1rio, exibe uma mensagem de erro com base no conte\u00fado da resposta.</p> <code>mostrar_mensagem_sucesso</code> <p>Exibe uma mensagem de sucesso no Streamlit.                         Utilizado para informar ao usu\u00e1rio que a opera\u00e7\u00e3o foi realizada com sucesso.</p> <code>mostrar_mensagem_erro</code> <p>Exibe uma mensagem de erro no Streamlit baseada na resposta HTTP.                                                 Se a resposta contiver um erro detalhado, essa fun\u00e7\u00e3o ir\u00e1 extrair e exibir as mensagens de erro.                                                 Se a resposta n\u00e3o puder ser decodificada, exibe uma mensagem de erro gen\u00e9rica.</p> <code>mostrar_erro_detalhado</code> <p>Exibe uma mensagem de erro detalhada no Streamlit.                                 Se o detalhe do erro for uma lista, exibe cada mensagem de erro em uma nova linha.                                 Caso contr\u00e1rio, exibe o detalhe do erro diretamente.</p> <code>adicionar_produto</code> <p>Envia uma requisi\u00e7\u00e3o para adicionar um novo produto.</p> <code>visualizar_produtos</code> <p>Envia uma requisi\u00e7\u00e3o para obter a lista de todos os produtos.</p> <code>obter_detalhes_do_produto</code> <p>Envia uma requisi\u00e7\u00e3o para obter os detalhes de um produto espec\u00edfico.</p> <code>deletar_produto</code> <p>Envia uma requisi\u00e7\u00e3o para deletar um produto espec\u00edfico.</p> <code>atualizar_produto</code> <p>Envia uma requisi\u00e7\u00e3o para atualizar um produto espec\u00edfico.</p>"},{"location":"frontend/produto/#frontend.produto.adicionar_produto","title":"<code>adicionar_produto(name, description, price, categoria, email_fornecedor)</code>","text":"<p>Envia uma requisi\u00e7\u00e3o para adicionar um novo produto.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Nome do produto.</p> required <code>description</code> <code>str</code> <p>Descri\u00e7\u00e3o do produto.</p> required <code>price</code> <code>float</code> <p>Pre\u00e7o do produto.</p> required <code>categoria</code> <code>str</code> <p>Categoria do produto.</p> required <code>email_fornecedor</code> <code>str</code> <p>Email do fornecedor do produto.</p> required <p>Returns:</p> Name Type Description <code>response</code> <code>Response</code> <p>A resposta HTTP da requisi\u00e7\u00e3o.</p> Source code in <code>frontend/produto.py</code> <pre><code>def adicionar_produto(\n    name: str,\n    description: str,\n    price: str,\n    categoria: str,\n    email_fornecedor: str,\n) -&gt; requests.Response:\n    \"\"\"\n    Envia uma requisi\u00e7\u00e3o para adicionar um novo produto.\n\n    Args:\n        name (str): Nome do produto.\n        description (str): Descri\u00e7\u00e3o do produto.\n        price (float): Pre\u00e7o do produto.\n        categoria (str): Categoria do produto.\n        email_fornecedor (str): Email do fornecedor do produto.\n\n    Returns:\n        response(requests.Response): A resposta HTTP da requisi\u00e7\u00e3o.\n    \"\"\"\n    response = requests.post(\n        \"http://backend:8000/products/\",\n        json={\n            \"name\": name,\n            \"description\": description,\n            \"price\": price,\n            \"categoria\": categoria,\n            \"email_fornecedor\": email_fornecedor,\n        },\n    )\n    return response\n</code></pre>"},{"location":"frontend/produto/#frontend.produto.atualizar_produto","title":"<code>atualizar_produto(id_produto, dados_atualizados)</code>","text":"<p>Envia uma requisi\u00e7\u00e3o para atualizar um produto espec\u00edfico.</p> <p>Parameters:</p> Name Type Description Default <code>id_produto</code> <code>str</code> <p>ID do produto a ser atualizado.</p> required <code>dados_atualizados</code> <code>dict</code> <p>Dicion\u00e1rio com os dados atualizados do produto.</p> required <p>Returns:</p> Name Type Description <code>response</code> <code>Response</code> <p>A resposta HTTP da requisi\u00e7\u00e3o.</p> Source code in <code>frontend/produto.py</code> <pre><code>def atualizar_produto(id_produto: str, dados_atualizados: str) -&gt; requests.Response:\n    \"\"\"\n    Envia uma requisi\u00e7\u00e3o para atualizar um produto espec\u00edfico.\n\n    Args:\n        id_produto (str): ID do produto a ser atualizado.\n        dados_atualizados (dict): Dicion\u00e1rio com os dados atualizados do produto.\n\n    Returns:\n        response (requests.Response): A resposta HTTP da requisi\u00e7\u00e3o.\n    \"\"\"\n    response = requests.put(\n        f\"http://backend:8000/products/{id_produto}\", json=dados_atualizados\n    )\n    return response\n</code></pre>"},{"location":"frontend/produto/#frontend.produto.deletar_produto","title":"<code>deletar_produto(id_produto)</code>","text":"<p>Envia uma requisi\u00e7\u00e3o para deletar um produto espec\u00edfico.</p> <p>Parameters:</p> Name Type Description Default <code>id_produto</code> <code>str</code> <p>ID do produto a ser deletado.</p> required <p>Returns:</p> Name Type Description <code>response</code> <code>Response</code> <p>A resposta HTTP da requisi\u00e7\u00e3o.</p> Source code in <code>frontend/produto.py</code> <pre><code>def deletar_produto(id_produto: str) -&gt; requests.Response:\n    \"\"\"\n    Envia uma requisi\u00e7\u00e3o para deletar um produto espec\u00edfico.\n\n    Args:\n        id_produto (str): ID do produto a ser deletado.\n\n    Returns:\n        response(requests.Response): A resposta HTTP da requisi\u00e7\u00e3o.\n    \"\"\"\n    response = requests.delete(f\"http://backend:8000/products/{id_produto}\")\n    return response\n</code></pre>"},{"location":"frontend/produto/#frontend.produto.mostrar_erro_detalhado","title":"<code>mostrar_erro_detalhado(data)</code>","text":"<p>Exibe uma mensagem de erro detalhada no Streamlit. Se o detalhe do erro for uma lista, exibe cada mensagem de erro em uma nova linha. Caso contr\u00e1rio, exibe o detalhe do erro diretamente.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dados JSON contendo detalhes do erro.</p> required Source code in <code>frontend/produto.py</code> <pre><code>def mostrar_erro_detalhado(data: dict) -&gt; None:\n    \"\"\"\n    Exibe uma mensagem de erro detalhada no Streamlit.\n    Se o detalhe do erro for uma lista, exibe cada mensagem de erro em uma nova linha.\n    Caso contr\u00e1rio, exibe o detalhe do erro diretamente.\n\n    Args:\n        data (dict): Dados JSON contendo detalhes do erro.\n    \"\"\"\n    if isinstance(data[\"detail\"], list):\n        errors = \"\\n\".join([error[\"msg\"] for error in data[\"detail\"]])\n        st.error(f\"Erro: {errors}\")\n    else:\n        st.error(f\"Erro: {data['detail']}\")\n</code></pre>"},{"location":"frontend/produto/#frontend.produto.mostrar_mensagem_erro","title":"<code>mostrar_mensagem_erro(response)</code>","text":"<p>Exibe uma mensagem de erro no Streamlit baseada na resposta HTTP. Se a resposta contiver um erro detalhado, essa fun\u00e7\u00e3o ir\u00e1 extrair e exibir as mensagens de erro. Se a resposta n\u00e3o puder ser decodificada, exibe uma mensagem de erro gen\u00e9rica.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response</code> <p>A resposta HTTP da requisi\u00e7\u00e3o.</p> required Source code in <code>frontend/produto.py</code> <pre><code>def mostrar_mensagem_erro(response: requests.Response) -&gt; None:\n    \"\"\"\n    Exibe uma mensagem de erro no Streamlit baseada na resposta HTTP.\n    Se a resposta contiver um erro detalhado, essa fun\u00e7\u00e3o ir\u00e1 extrair e exibir as mensagens de erro.\n    Se a resposta n\u00e3o puder ser decodificada, exibe uma mensagem de erro gen\u00e9rica.\n\n    Args:\n        response (requests.Response): A resposta HTTP da requisi\u00e7\u00e3o.\n    \"\"\"\n    try:\n        data = response.json()\n        if \"detail\" in data:\n            mostrar_erro_detalhado(data)\n    except ValueError:\n        st.error(\"Erro desconhecido. N\u00e3o foi poss\u00edvel decodificar a resposta.\")\n</code></pre>"},{"location":"frontend/produto/#frontend.produto.mostrar_mensagem_sucesso","title":"<code>mostrar_mensagem_sucesso()</code>","text":"<p>Exibe uma mensagem de sucesso no Streamlit.</p> <p>Utilizado para informar ao usu\u00e1rio que a opera\u00e7\u00e3o foi realizada com sucesso.</p> Source code in <code>frontend/produto.py</code> <pre><code>def mostrar_mensagem_sucesso() -&gt; None:\n    \"\"\"\n    Exibe uma mensagem de sucesso no Streamlit.\n\n    Utilizado para informar ao usu\u00e1rio que a opera\u00e7\u00e3o foi realizada com sucesso.\n    \"\"\"\n    st.success(\"Opera\u00e7\u00e3o realizada com sucesso!\")\n</code></pre>"},{"location":"frontend/produto/#frontend.produto.obter_detalhes_do_produto","title":"<code>obter_detalhes_do_produto(id_produto)</code>","text":"<p>Envia uma requisi\u00e7\u00e3o para obter os detalhes de um produto espec\u00edfico.</p> <p>Parameters:</p> Name Type Description Default <code>id_produto</code> <code>str</code> <p>ID do produto para obter detalhes.</p> required <p>Returns:</p> Name Type Description <code>response</code> <code>Response</code> <p>A resposta HTTP da requisi\u00e7\u00e3o.</p> Source code in <code>frontend/produto.py</code> <pre><code>def obter_detalhes_do_produto(id_produto: str) -&gt; requests.Response:\n    \"\"\"\n    Envia uma requisi\u00e7\u00e3o para obter os detalhes de um produto espec\u00edfico.\n\n    Args:\n        id_produto (str): ID do produto para obter detalhes.\n\n    Returns:\n        response(requests.Response): A resposta HTTP da requisi\u00e7\u00e3o.\n    \"\"\"\n    response = requests.get(f\"http://backend:8000/products/{id_produto}\")\n    return response\n</code></pre>"},{"location":"frontend/produto/#frontend.produto.show_response_message","title":"<code>show_response_message(response)</code>","text":"<p>Exibe uma mensagem baseada no status da resposta HTTP. Se o status da resposta for 200, exibe uma mensagem de sucesso. Caso contr\u00e1rio, exibe uma mensagem de erro com base no conte\u00fado da resposta.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response</code> <p>A resposta HTTP da requisi\u00e7\u00e3o.</p> required Source code in <code>frontend/produto.py</code> <pre><code>def show_response_message(response: requests.Response) -&gt; None:\n    \"\"\"\n    Exibe uma mensagem baseada no status da resposta HTTP.\n    Se o status da resposta for 200, exibe uma mensagem de sucesso.\n    Caso contr\u00e1rio, exibe uma mensagem de erro com base no conte\u00fado da resposta.\n\n    Args:\n        response (requests.Response): A resposta HTTP da requisi\u00e7\u00e3o.\n    \"\"\"\n    if response.status_code == 200:\n        mostrar_mensagem_sucesso()\n    else:\n        mostrar_mensagem_erro(response)\n</code></pre>"},{"location":"frontend/produto/#frontend.produto.visualizar_produtos","title":"<code>visualizar_produtos()</code>","text":"<p>Envia uma requisi\u00e7\u00e3o para obter a lista de todos os produtos.</p> <p>Returns:</p> Name Type Description <code>response</code> <code>Response</code> <p>A resposta HTTP da requisi\u00e7\u00e3o.</p> Source code in <code>frontend/produto.py</code> <pre><code>def visualizar_produtos() -&gt; requests.Response:\n    \"\"\"\n    Envia uma requisi\u00e7\u00e3o para obter a lista de todos os produtos.\n\n    Returns:\n        response(requests.Response): A resposta HTTP da requisi\u00e7\u00e3o.\n    \"\"\"\n    response = requests.get(\"http://backend:8000/products/\")\n    return response\n</code></pre>"}]}